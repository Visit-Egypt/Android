// Generated by Dagger (https://dagger.dev).
package com.visitegypt.presentation.detailplace;

import com.visitegypt.domain.usecase.GetItemsUseCase;
import com.visitegypt.domain.usecase.GetPlaceDetailUseCase;
import com.visitegypt.domain.usecase.SubmitReviewUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DetailViewModel_Factory implements Factory<DetailViewModel> {
  private final Provider<GetPlaceDetailUseCase> getPlaceDetailUseCaseProvider;

  private final Provider<GetItemsUseCase> getItemsUseCaseProvider;

  private final Provider<SubmitReviewUseCase> submitReviewUseCaseProvider;

  public DetailViewModel_Factory(Provider<GetPlaceDetailUseCase> getPlaceDetailUseCaseProvider,
      Provider<GetItemsUseCase> getItemsUseCaseProvider,
      Provider<SubmitReviewUseCase> submitReviewUseCaseProvider) {
    this.getPlaceDetailUseCaseProvider = getPlaceDetailUseCaseProvider;
    this.getItemsUseCaseProvider = getItemsUseCaseProvider;
    this.submitReviewUseCaseProvider = submitReviewUseCaseProvider;
  }

  @Override
  public DetailViewModel get() {
    return newInstance(getPlaceDetailUseCaseProvider.get(), getItemsUseCaseProvider.get(), submitReviewUseCaseProvider.get());
  }

  public static DetailViewModel_Factory create(
      Provider<GetPlaceDetailUseCase> getPlaceDetailUseCaseProvider,
      Provider<GetItemsUseCase> getItemsUseCaseProvider,
      Provider<SubmitReviewUseCase> submitReviewUseCaseProvider) {
    return new DetailViewModel_Factory(getPlaceDetailUseCaseProvider, getItemsUseCaseProvider, submitReviewUseCaseProvider);
  }

  public static DetailViewModel newInstance(GetPlaceDetailUseCase getPlaceDetailUseCase,
      GetItemsUseCase getItemsUseCase, SubmitReviewUseCase submitReviewUseCase) {
    return new DetailViewModel(getPlaceDetailUseCase, getItemsUseCase, submitReviewUseCase);
  }
}
