// Generated by Dagger (https://dagger.dev).
package com.visitegypt.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava3.RxJava3CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final NetworkModule module;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  private final Provider<RxJava3CallAdapterFactory> rxJava3CallAdapterFactoryProvider;

  private final Provider<OkHttpClient> clientProvider;

  public NetworkModule_ProvideRetrofitFactory(NetworkModule module,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<RxJava3CallAdapterFactory> rxJava3CallAdapterFactoryProvider,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
    this.rxJava3CallAdapterFactoryProvider = rxJava3CallAdapterFactoryProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, gsonConverterFactoryProvider.get(), rxJava3CallAdapterFactoryProvider.get(), clientProvider.get());
  }

  public static NetworkModule_ProvideRetrofitFactory create(NetworkModule module,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<RxJava3CallAdapterFactory> rxJava3CallAdapterFactoryProvider,
      Provider<OkHttpClient> clientProvider) {
    return new NetworkModule_ProvideRetrofitFactory(module, gsonConverterFactoryProvider, rxJava3CallAdapterFactoryProvider, clientProvider);
  }

  public static Retrofit provideRetrofit(NetworkModule instance,
      GsonConverterFactory gsonConverterFactory,
      RxJava3CallAdapterFactory rxJava3CallAdapterFactory, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(gsonConverterFactory, rxJava3CallAdapterFactory, client));
  }
}
