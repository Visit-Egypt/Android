// Generated by Dagger (https://dagger.dev).
package com.visitegypt.di;

import com.visitegypt.data.source.remote.RetrofitService;
import com.visitegypt.domain.repository.PlaceRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidePlaceRepositoryFactory implements Factory<PlaceRepository> {
  private final NetworkModule module;

  private final Provider<RetrofitService> retrofitServiceProvider;

  public NetworkModule_ProvidePlaceRepositoryFactory(NetworkModule module,
      Provider<RetrofitService> retrofitServiceProvider) {
    this.module = module;
    this.retrofitServiceProvider = retrofitServiceProvider;
  }

  @Override
  public PlaceRepository get() {
    return providePlaceRepository(module, retrofitServiceProvider.get());
  }

  public static NetworkModule_ProvidePlaceRepositoryFactory create(NetworkModule module,
      Provider<RetrofitService> retrofitServiceProvider) {
    return new NetworkModule_ProvidePlaceRepositoryFactory(module, retrofitServiceProvider);
  }

  public static PlaceRepository providePlaceRepository(NetworkModule instance,
      RetrofitService retrofitService) {
    return Preconditions.checkNotNullFromProvides(instance.providePlaceRepository(retrofitService));
  }
}
