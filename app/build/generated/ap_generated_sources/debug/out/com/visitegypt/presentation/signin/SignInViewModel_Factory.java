// Generated by Dagger (https://dagger.dev).
package com.visitegypt.presentation.signin;

import android.content.SharedPreferences;
import com.visitegypt.domain.usecase.GetUserUseCase;
import com.visitegypt.domain.usecase.LoginUserUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SignInViewModel_Factory implements Factory<SignInViewModel> {
  private final Provider<LoginUserUseCase> loginUserUseCaseProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  private final Provider<GetUserUseCase> getUserUseCaseProvider;

  public SignInViewModel_Factory(Provider<LoginUserUseCase> loginUserUseCaseProvider,
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<GetUserUseCase> getUserUseCaseProvider) {
    this.loginUserUseCaseProvider = loginUserUseCaseProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
    this.getUserUseCaseProvider = getUserUseCaseProvider;
  }

  @Override
  public SignInViewModel get() {
    return newInstance(loginUserUseCaseProvider.get(), sharedPreferencesProvider.get(), getUserUseCaseProvider.get());
  }

  public static SignInViewModel_Factory create(Provider<LoginUserUseCase> loginUserUseCaseProvider,
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<GetUserUseCase> getUserUseCaseProvider) {
    return new SignInViewModel_Factory(loginUserUseCaseProvider, sharedPreferencesProvider, getUserUseCaseProvider);
  }

  public static SignInViewModel newInstance(LoginUserUseCase loginUserUseCase,
      SharedPreferences sharedPreferences, GetUserUseCase getUserUseCase) {
    return new SignInViewModel(loginUserUseCase, sharedPreferences, getUserUseCase);
  }
}
