// Generated by Dagger (https://dagger.dev).
package com.visitegypt.di;

import android.content.SharedPreferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<OkHttpClient.Builder> httpClientProvider;

  private final Provider<HttpLoggingInterceptor> loggingProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  public NetworkModule_ProvideOkHttpClientFactory(NetworkModule module,
      Provider<OkHttpClient.Builder> httpClientProvider,
      Provider<HttpLoggingInterceptor> loggingProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    this.module = module;
    this.httpClientProvider = httpClientProvider;
    this.loggingProvider = loggingProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, httpClientProvider.get(), loggingProvider.get(), sharedPreferencesProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(NetworkModule module,
      Provider<OkHttpClient.Builder> httpClientProvider,
      Provider<HttpLoggingInterceptor> loggingProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, httpClientProvider, loggingProvider, sharedPreferencesProvider);
  }

  public static OkHttpClient provideOkHttpClient(NetworkModule instance,
      OkHttpClient.Builder httpClient, HttpLoggingInterceptor logging,
      SharedPreferences sharedPreferences) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(httpClient, logging, sharedPreferences));
  }
}
