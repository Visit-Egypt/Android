// Generated by Dagger (https://dagger.dev).
package com.visitegypt.domain.usecase;

import android.content.SharedPreferences;
import com.visitegypt.domain.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginUserUseCase_Factory implements Factory<LoginUserUseCase> {
  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  public LoginUserUseCase_Factory(Provider<UserRepository> userRepositoryProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public LoginUserUseCase get() {
    return newInstance(userRepositoryProvider.get(), sharedPreferencesProvider.get());
  }

  public static LoginUserUseCase_Factory create(Provider<UserRepository> userRepositoryProvider,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    return new LoginUserUseCase_Factory(userRepositoryProvider, sharedPreferencesProvider);
  }

  public static LoginUserUseCase newInstance(UserRepository userRepository,
      SharedPreferences sharedPreferences) {
    return new LoginUserUseCase(userRepository, sharedPreferences);
  }
}
