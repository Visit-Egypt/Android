// Generated by Dagger (https://dagger.dev).
package com.visitegypt.domain.usecase;

import com.visitegypt.domain.repository.ItemRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetItemsUseCase_Factory implements Factory<GetItemsUseCase> {
  private final Provider<ItemRepository> itemRepositoryProvider;

  public GetItemsUseCase_Factory(Provider<ItemRepository> itemRepositoryProvider) {
    this.itemRepositoryProvider = itemRepositoryProvider;
  }

  @Override
  public GetItemsUseCase get() {
    return newInstance(itemRepositoryProvider.get());
  }

  public static GetItemsUseCase_Factory create(Provider<ItemRepository> itemRepositoryProvider) {
    return new GetItemsUseCase_Factory(itemRepositoryProvider);
  }

  public static GetItemsUseCase newInstance(ItemRepository itemRepository) {
    return new GetItemsUseCase(itemRepository);
  }
}
