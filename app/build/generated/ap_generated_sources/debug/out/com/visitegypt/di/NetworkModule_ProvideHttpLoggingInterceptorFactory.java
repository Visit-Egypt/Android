// Generated by Dagger (https://dagger.dev).
package com.visitegypt.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideHttpLoggingInterceptorFactory implements Factory<HttpLoggingInterceptor> {
  private final NetworkModule module;

  private final Provider<OkHttpClient.Builder> httpClientProvider;

  public NetworkModule_ProvideHttpLoggingInterceptorFactory(NetworkModule module,
      Provider<OkHttpClient.Builder> httpClientProvider) {
    this.module = module;
    this.httpClientProvider = httpClientProvider;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return provideHttpLoggingInterceptor(module, httpClientProvider.get());
  }

  public static NetworkModule_ProvideHttpLoggingInterceptorFactory create(NetworkModule module,
      Provider<OkHttpClient.Builder> httpClientProvider) {
    return new NetworkModule_ProvideHttpLoggingInterceptorFactory(module, httpClientProvider);
  }

  public static HttpLoggingInterceptor provideHttpLoggingInterceptor(NetworkModule instance,
      OkHttpClient.Builder httpClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideHttpLoggingInterceptor(httpClient));
  }
}
