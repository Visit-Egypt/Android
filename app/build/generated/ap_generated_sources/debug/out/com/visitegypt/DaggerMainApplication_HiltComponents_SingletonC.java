// Generated by Dagger (https://dagger.dev).
package com.visitegypt;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.visitegypt.data.source.remote.RetrofitService;
import com.visitegypt.di.DatabaseModule;
import com.visitegypt.di.NetworkModule;
import com.visitegypt.di.NetworkModule_GetRetrofitServiceFactory;
import com.visitegypt.di.NetworkModule_ProvideChatbotRepositoryFactory;
import com.visitegypt.di.NetworkModule_ProvideGsonConverterFactoryFactory;
import com.visitegypt.di.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import com.visitegypt.di.NetworkModule_ProvideItemRepositoryFactory;
import com.visitegypt.di.NetworkModule_ProvideOkHttpClientBuilderFactory;
import com.visitegypt.di.NetworkModule_ProvideOkHttpClientFactory;
import com.visitegypt.di.NetworkModule_ProvidePlaceRepositoryFactory;
import com.visitegypt.di.NetworkModule_ProvidePostRepositoryFactory;
import com.visitegypt.di.NetworkModule_ProvideRetrofitFactory;
import com.visitegypt.di.NetworkModule_ProvideRxJava3CallAdapterFactoryFactory;
import com.visitegypt.di.NetworkModule_ProvideUserRepositoryFactory;
import com.visitegypt.di.SharedPrefsModule;
import com.visitegypt.di.SharedPrefsModule_ProvideSharedPreferencesFactory;
import com.visitegypt.domain.repository.ChatbotRepository;
import com.visitegypt.domain.repository.ItemRepository;
import com.visitegypt.domain.repository.PlaceRepository;
import com.visitegypt.domain.repository.PostsRepository;
import com.visitegypt.domain.repository.UserRepository;
import com.visitegypt.domain.usecase.ChatbotUseCase;
import com.visitegypt.domain.usecase.GetItemsUseCase;
import com.visitegypt.domain.usecase.GetPlaceDetailUseCase;
import com.visitegypt.domain.usecase.GetPlacesUseCase;
import com.visitegypt.domain.usecase.GetPostsByUser;
import com.visitegypt.domain.usecase.GetUserUseCase;
import com.visitegypt.domain.usecase.LoginUserUseCase;
import com.visitegypt.domain.usecase.RegisterUseCase;
import com.visitegypt.domain.usecase.SubmitReviewUseCase;
import com.visitegypt.domain.usecase.UpdateUserUseCase;
import com.visitegypt.presentation.chatbot.ChatbotActivity;
import com.visitegypt.presentation.chatbot.ChatbotViewModel;
import com.visitegypt.presentation.chatbot.ChatbotViewModel_HiltModules_KeyModule_ProvideFactory;
import com.visitegypt.presentation.detailplace.DetailActivity;
import com.visitegypt.presentation.detailplace.DetailActivity_MembersInjector;
import com.visitegypt.presentation.detailplace.DetailViewModel;
import com.visitegypt.presentation.detailplace.DetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.visitegypt.presentation.home.HomeActivity;
import com.visitegypt.presentation.home.HomeViewModel;
import com.visitegypt.presentation.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.visitegypt.presentation.signin.SignInActivity;
import com.visitegypt.presentation.signin.SignInViewModel;
import com.visitegypt.presentation.signin.SignInViewModel_HiltModules_KeyModule_ProvideFactory;
import com.visitegypt.presentation.signup.SignUpActivity;
import com.visitegypt.presentation.signup.SignUpViewModel;
import com.visitegypt.presentation.signup.SignUpViewModel_HiltModules_KeyModule_ProvideFactory;
import com.visitegypt.ui.account.AccountFragment;
import com.visitegypt.ui.account.AccountViewModel;
import com.visitegypt.ui.account.AccountViewModel_HiltModules_KeyModule_ProvideFactory;
import com.visitegypt.ui.setting.SettingFragment;
import com.visitegypt.ui.setting.SettingViewModel;
import com.visitegypt.ui.setting.SettingViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava3.RxJava3CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainApplication_HiltComponents_SingletonC extends MainApplication_HiltComponents.SingletonC {
  private final SharedPrefsModule sharedPrefsModule;

  private final ApplicationContextModule applicationContextModule;

  private final NetworkModule networkModule;

  private final DaggerMainApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<RxJava3CallAdapterFactory> provideRxJava3CallAdapterFactoryProvider;

  private Provider<OkHttpClient.Builder> provideOkHttpClientBuilderProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<RetrofitService> getRetrofitServiceProvider;

  private Provider<PostsRepository> providePostRepositoryProvider;

  private Provider<ChatbotRepository> provideChatbotRepositoryProvider;

  private Provider<PlaceRepository> providePlaceRepositoryProvider;

  private Provider<ItemRepository> provideItemRepositoryProvider;

  private Provider<UserRepository> provideUserRepositoryProvider;

  private DaggerMainApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, NetworkModule networkModuleParam,
      SharedPrefsModule sharedPrefsModuleParam) {
    this.sharedPrefsModule = sharedPrefsModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    this.networkModule = networkModuleParam;
    initialize(applicationContextModuleParam, networkModuleParam, sharedPrefsModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private SharedPreferences sharedPreferences() {
    return SharedPrefsModule_ProvideSharedPreferencesFactory.provideSharedPreferences(sharedPrefsModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private HttpLoggingInterceptor httpLoggingInterceptor() {
    return NetworkModule_ProvideHttpLoggingInterceptorFactory.provideHttpLoggingInterceptor(networkModule, provideOkHttpClientBuilderProvider.get());
  }

  private OkHttpClient okHttpClient() {
    return NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(networkModule, provideOkHttpClientBuilderProvider.get(), provideHttpLoggingInterceptorProvider.get(), provideSharedPreferencesProvider.get());
  }

  private Retrofit retrofit() {
    return NetworkModule_ProvideRetrofitFactory.provideRetrofit(networkModule, provideGsonConverterFactoryProvider.get(), provideRxJava3CallAdapterFactoryProvider.get(), provideOkHttpClientProvider.get());
  }

  private RetrofitService retrofitService() {
    return NetworkModule_GetRetrofitServiceFactory.getRetrofitService(networkModule, provideRetrofitProvider.get());
  }

  private PostsRepository postsRepository() {
    return NetworkModule_ProvidePostRepositoryFactory.providePostRepository(networkModule, getRetrofitServiceProvider.get());
  }

  private ChatbotRepository chatbotRepository() {
    return NetworkModule_ProvideChatbotRepositoryFactory.provideChatbotRepository(networkModule, getRetrofitServiceProvider.get());
  }

  private PlaceRepository placeRepository() {
    return NetworkModule_ProvidePlaceRepositoryFactory.providePlaceRepository(networkModule, getRetrofitServiceProvider.get());
  }

  private ItemRepository itemRepository() {
    return NetworkModule_ProvideItemRepositoryFactory.provideItemRepository(networkModule, getRetrofitServiceProvider.get());
  }

  private UserRepository userRepository() {
    return NetworkModule_ProvideUserRepositoryFactory.provideUserRepository(networkModule, getRetrofitServiceProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final NetworkModule networkModuleParam, final SharedPrefsModule sharedPrefsModuleParam) {
    this.provideSharedPreferencesProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonC, 0));
    this.provideGsonConverterFactoryProvider = DoubleCheck.provider(new SwitchingProvider<GsonConverterFactory>(singletonC, 4));
    this.provideRxJava3CallAdapterFactoryProvider = DoubleCheck.provider(new SwitchingProvider<RxJava3CallAdapterFactory>(singletonC, 5));
    this.provideOkHttpClientBuilderProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient.Builder>(singletonC, 7));
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonC, 8));
    this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 6));
    this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 3));
    this.getRetrofitServiceProvider = DoubleCheck.provider(new SwitchingProvider<RetrofitService>(singletonC, 2));
    this.providePostRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PostsRepository>(singletonC, 1));
    this.provideChatbotRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ChatbotRepository>(singletonC, 9));
    this.providePlaceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PlaceRepository>(singletonC, 10));
    this.provideItemRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ItemRepository>(singletonC, 11));
    this.provideUserRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<UserRepository>(singletonC, 12));
  }

  @Override
  public void injectMainApplication(MainApplication mainApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private NetworkModule networkModule;

    private SharedPrefsModule sharedPrefsModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder sharedPrefsModule(SharedPrefsModule sharedPrefsModule) {
      this.sharedPrefsModule = Preconditions.checkNotNull(sharedPrefsModule);
      return this;
    }

    public MainApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (sharedPrefsModule == null) {
        this.sharedPrefsModule = new SharedPrefsModule();
      }
      return new DaggerMainApplication_HiltComponents_SingletonC(applicationContextModule, networkModule, sharedPrefsModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MainApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MainApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements MainApplication_HiltComponents.ActivityC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MainApplication_HiltComponents.FragmentC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MainApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MainApplication_HiltComponents.ViewC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MainApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MainApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MainApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MainApplication_HiltComponents.FragmentC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectAccountFragment(AccountFragment accountFragment) {
    }

    @Override
    public void injectSettingFragment(SettingFragment settingFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MainApplication_HiltComponents.ViewC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MainApplication_HiltComponents.ActivityC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectChatbotActivity(ChatbotActivity chatbotActivity) {
    }

    @Override
    public void injectDetailActivity(DetailActivity detailActivity) {
      injectDetailActivity2(detailActivity);
    }

    @Override
    public void injectHomeActivity(HomeActivity homeActivity) {
    }

    @Override
    public void injectSignInActivity(SignInActivity signInActivity) {
    }

    @Override
    public void injectSignUpActivity(SignUpActivity signUpActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(7).add(AccountViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ChatbotViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(DetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SignInViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SignUpViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    private DetailActivity injectDetailActivity2(DetailActivity instance) {
      DetailActivity_MembersInjector.injectSharedPreferences(instance, singletonC.provideSharedPreferencesProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends MainApplication_HiltComponents.ViewModelC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AccountViewModel> accountViewModelProvider;

    private Provider<ChatbotViewModel> chatbotViewModelProvider;

    private Provider<DetailViewModel> detailViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<SettingViewModel> settingViewModelProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<SignUpViewModel> signUpViewModelProvider;

    private ViewModelCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private GetPostsByUser getPostsByUser() {
      return new GetPostsByUser(singletonC.providePostRepositoryProvider.get(), singletonC.provideSharedPreferencesProvider.get());
    }

    private AccountViewModel accountViewModel() {
      return new AccountViewModel(singletonC.provideSharedPreferencesProvider.get(), getPostsByUser());
    }

    private ChatbotUseCase chatbotUseCase() {
      return new ChatbotUseCase(singletonC.provideChatbotRepositoryProvider.get());
    }

    private ChatbotViewModel chatbotViewModel() {
      return new ChatbotViewModel(chatbotUseCase());
    }

    private GetPlaceDetailUseCase getPlaceDetailUseCase() {
      return new GetPlaceDetailUseCase(singletonC.providePlaceRepositoryProvider.get());
    }

    private GetItemsUseCase getItemsUseCase() {
      return new GetItemsUseCase(singletonC.provideItemRepositoryProvider.get());
    }

    private SubmitReviewUseCase submitReviewUseCase() {
      return new SubmitReviewUseCase(singletonC.providePlaceRepositoryProvider.get());
    }

    private DetailViewModel detailViewModel() {
      return new DetailViewModel(getPlaceDetailUseCase(), getItemsUseCase(), submitReviewUseCase());
    }

    private GetPlacesUseCase getPlacesUseCase() {
      return new GetPlacesUseCase(singletonC.providePlaceRepositoryProvider.get());
    }

    private HomeViewModel homeViewModel() {
      return new HomeViewModel(getPlacesUseCase());
    }

    private GetUserUseCase getUserUseCase() {
      return new GetUserUseCase(singletonC.provideUserRepositoryProvider.get(), singletonC.provideSharedPreferencesProvider.get());
    }

    private UpdateUserUseCase updateUserUseCase() {
      return new UpdateUserUseCase(singletonC.provideUserRepositoryProvider.get(), singletonC.provideSharedPreferencesProvider.get());
    }

    private SettingViewModel settingViewModel() {
      return new SettingViewModel(getUserUseCase(), singletonC.provideSharedPreferencesProvider.get(), updateUserUseCase());
    }

    private LoginUserUseCase loginUserUseCase() {
      return new LoginUserUseCase(singletonC.provideUserRepositoryProvider.get(), singletonC.provideSharedPreferencesProvider.get());
    }

    private SignInViewModel signInViewModel() {
      return new SignInViewModel(loginUserUseCase(), singletonC.provideSharedPreferencesProvider.get(), getUserUseCase());
    }

    private RegisterUseCase registerUseCase() {
      return new RegisterUseCase(singletonC.provideUserRepositoryProvider.get(), singletonC.provideSharedPreferencesProvider.get());
    }

    private SignUpViewModel signUpViewModel() {
      return new SignUpViewModel(registerUseCase(), singletonC.provideSharedPreferencesProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.accountViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.chatbotViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.detailViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.settingViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.signInViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
      this.signUpViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(7).put("com.visitegypt.ui.account.AccountViewModel", (Provider) accountViewModelProvider).put("com.visitegypt.presentation.chatbot.ChatbotViewModel", (Provider) chatbotViewModelProvider).put("com.visitegypt.presentation.detailplace.DetailViewModel", (Provider) detailViewModelProvider).put("com.visitegypt.presentation.home.HomeViewModel", (Provider) homeViewModelProvider).put("com.visitegypt.ui.setting.SettingViewModel", (Provider) settingViewModelProvider).put("com.visitegypt.presentation.signin.SignInViewModel", (Provider) signInViewModelProvider).put("com.visitegypt.presentation.signup.SignUpViewModel", (Provider) signUpViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.visitegypt.ui.account.AccountViewModel 
          return (T) viewModelCImpl.accountViewModel();

          case 1: // com.visitegypt.presentation.chatbot.ChatbotViewModel 
          return (T) viewModelCImpl.chatbotViewModel();

          case 2: // com.visitegypt.presentation.detailplace.DetailViewModel 
          return (T) viewModelCImpl.detailViewModel();

          case 3: // com.visitegypt.presentation.home.HomeViewModel 
          return (T) viewModelCImpl.homeViewModel();

          case 4: // com.visitegypt.ui.setting.SettingViewModel 
          return (T) viewModelCImpl.settingViewModel();

          case 5: // com.visitegypt.presentation.signin.SignInViewModel 
          return (T) viewModelCImpl.signInViewModel();

          case 6: // com.visitegypt.presentation.signup.SignUpViewModel 
          return (T) viewModelCImpl.signUpViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MainApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MainApplication_HiltComponents.ServiceC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // android.content.SharedPreferences 
        return (T) singletonC.sharedPreferences();

        case 1: // com.visitegypt.domain.repository.PostsRepository 
        return (T) singletonC.postsRepository();

        case 2: // com.visitegypt.data.source.remote.RetrofitService 
        return (T) singletonC.retrofitService();

        case 3: // retrofit2.Retrofit 
        return (T) singletonC.retrofit();

        case 4: // retrofit2.converter.gson.GsonConverterFactory 
        return (T) NetworkModule_ProvideGsonConverterFactoryFactory.provideGsonConverterFactory(singletonC.networkModule);

        case 5: // retrofit2.adapter.rxjava3.RxJava3CallAdapterFactory 
        return (T) NetworkModule_ProvideRxJava3CallAdapterFactoryFactory.provideRxJava3CallAdapterFactory(singletonC.networkModule);

        case 6: // okhttp3.OkHttpClient 
        return (T) singletonC.okHttpClient();

        case 7: // okhttp3.OkHttpClient.Builder 
        return (T) NetworkModule_ProvideOkHttpClientBuilderFactory.provideOkHttpClientBuilder(singletonC.networkModule);

        case 8: // okhttp3.logging.HttpLoggingInterceptor 
        return (T) singletonC.httpLoggingInterceptor();

        case 9: // com.visitegypt.domain.repository.ChatbotRepository 
        return (T) singletonC.chatbotRepository();

        case 10: // com.visitegypt.domain.repository.PlaceRepository 
        return (T) singletonC.placeRepository();

        case 11: // com.visitegypt.domain.repository.ItemRepository 
        return (T) singletonC.itemRepository();

        case 12: // com.visitegypt.domain.repository.UserRepository 
        return (T) singletonC.userRepository();

        default: throw new AssertionError(id);
      }
    }
  }
}
