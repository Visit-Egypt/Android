// Generated by Dagger (https://dagger.dev).
package com.visitegypt.di;

import com.visitegypt.data.source.remote.RetrofitService;
import com.visitegypt.domain.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final NetworkModule module;

  private final Provider<RetrofitService> retrofitServiceProvider;

  public NetworkModule_ProvideUserRepositoryFactory(NetworkModule module,
      Provider<RetrofitService> retrofitServiceProvider) {
    this.module = module;
    this.retrofitServiceProvider = retrofitServiceProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(module, retrofitServiceProvider.get());
  }

  public static NetworkModule_ProvideUserRepositoryFactory create(NetworkModule module,
      Provider<RetrofitService> retrofitServiceProvider) {
    return new NetworkModule_ProvideUserRepositoryFactory(module, retrofitServiceProvider);
  }

  public static UserRepository provideUserRepository(NetworkModule instance,
      RetrofitService retrofitService) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(retrofitService));
  }
}
